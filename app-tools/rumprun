#!/bin/sh
#
# Copyright (c) 2014 Martin Lucina.  All Rights Reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

#
# rumprun: "driver" script for running rumprun application stacks
#

exec 3>&1 1>&2
echo
echo !!!
echo !!! NOTE: rumprun is experimental and usage may change in the future
echo !!!
echo
exec 1>&3 3>&-

err()
{
	echo rumprun: error: "$@" 1>&2
	exit 1
}

myoptstr='n:b:e:pidD:N:M:S'

usage()
{
	cat <<EOM
usage: rumprun STACK [ -ipd ] [ -D PORT ] [ -N NAME ] [ -M MEM ] [ -b BLKSPEC ] [ -n NETSPEC ] [ -e VAR[=VALUE] ] [ -- ] APP [ args ]
    STACK is the rumprun stack to use. Only "xen" is currently supported
    APP is the rumprun application to start
    args will be passed to the application command line
    -N NAME sets the domain's name to NAME, default is rumprun-APP
    -M MEM sets the domain's memory to MEM, default is 16
    -b BLKSPEC configures a block device as hostpath,mountpoint
    -n NETSPEC configures a network interface, using one of:
       inet,dhcp - IPv4 with DHCP
       inet,static,ADDR/MASK[,GATEWAY] - IPv4 with static IP
       inet6,auto - IPv6 with stateless autoconfiguration
    -e set guest environment VAR to VALUE
    -i attaches to domain console on startup
    -p creates the domain but leaves it paused
    -d destroys the domain on poweroff
    -D PORT attaches a GDB server on PORT to the domain
    
    When run without -i the local domain id is printed to standard output
EOM
	exit 1
}

store_netspec=usage
nindex=0
bindex=0

json_append()
{

	json="${json} $*"
}

json_finalize_block()
{

	json_append '},'
}

# Detect the filesystem type of the image at $1.
detect_fstype()
{
	eval $(blkid -o export $1)
	if [ $? -ne 0 ]; then
		TYPE=unknown
	fi
	case ${TYPE} in
	ufs)
		echo ffs
		return 0
		;;
	iso9660)
		echo cd9660
		return 0
		;;
	*)
		echo unknown
		return 1
		;;
	esac
}

xen_store_netspec()
{

	echo net/${nindex}/type ${iftype} >>${xenstore}
	echo net/${nindex}/method ${ifmethod} >>${xenstore}
	if [ -n "${ifaddr}" ]; then
		echo net/${nindex}/addr ${ifaddr} >>${xenstore}
		echo net/${nindex}/netmask ${ifmask} >>${xenstore}
	fi
	if [ -n "${ifgw}" ]; then
		echo net/${nindex}/gw ${ifgw} >>${xenstore}
	fi
}

json_store_netspec()
{

	json_append '"net" : {'

	# XXX: should not generate the interface here
	opt_netif="${opt_netif} -net nic,model=virtio -net user"

	# XXX: should not assume vioif or -net user
	json_append	'"if":		"'vioif${nindex}'",'

	json_append	'"type":	"'${iftype}'",'
	json_append	'"method":	"'${ifmethod}'",'

	[ -n "${ifaddr}" ] || { json_finalize_block ; return ; }

	json_append	'"addr":	"'${ifaddr}'",'
	json_append	'"mask":	"'${ifmask}'",'

	[ -n "${ifgw}" ] || { json_finalize_block ; return ; }

	json_append	'"gw":		"'${ifgw}'",'

	json_finalize_block
}

parse_netspec()
{

	IFS=,
	set -- $1
	unset IFS

	[ $# -lt 2 ] && usage
	iftype=$1
	ifmethod=$2
	[ "${iftype}" != "inet" -a "${iftype}" != "inet6" ] && return 1
	conf_vif="${conf_vif}'',"
	case ${ifmethod} in
		auto)
			;;
		dhcp)
			;;
		static)
			ifaddr=${3%/*}
			ifmask=${3#*/}
			[ -n "${ifaddr}" ] || usage
			[ -n "${ifmask}" ] || usage
			ifgw=$4
			;;
		*)
			return 1
			;;
	esac

	${store_netspec}
	nindex=$(expr $nindex + 1)

	return 0
}

xen_store_blkspec()
{

	vdev=hd$(echo ${bindex} | tr '[0-9]' '[a-j]')
	conf_disk="${conf_disk}'file:$image,$vdev,w',"
	echo blk/${bindex}/type etfs >>${xenstore}
	echo blk/${bindex}/fstype $fstype >>${xenstore}
	if [ -n "$mountpoint" ]; then
		echo blk/${bindex}/mountpoint $mountpoint\
		>>${xenstore}
	fi
}

json_store_blkspec()
{

	# XXX: should not generate the interface here
	opt_drivespec="${opt_drivespec} -drive if=virtio,file=${image}"

	# if the image does not need to be mounted, we're done
	[ -n "${mountpoint}" ] || return

	json_append '"blk" : {'

	# XXX: should not assume ld (virtio)
	json_append	'"dev":		"'/dev/ld${bindex}a'",'
	json_append	'"fstype":	"'${fstype}'",'
	json_append	'"mountpoint":	"'${mountpoint}'",'

	json_finalize_block
}

parse_blkspec()
{
	spec=$1

	image=${spec%,*}
	image=$(readlink -f ${image})
	mountpoint=$(echo ${spec} | sed -n 's/.*,\(.*\)/\1/p')
	[ -n "$image" ] || usage
	[ -f "$image" ] || err File $image does not exist

	if [ -n "$mountpoint" ]; then
		fstype=$(detect_fstype $image)
		[ $? -ne 0 ] && err File $image: unknown fstype
	fi

	${store_blkspec}
	bindex=$(expr $bindex + 1)
}

# run_xen: Generate Xen configuration and run application stack.
run_xen()
{
	# try to find gdbsx from common locations
	unset gdbsx
	for x in gdbsx /usr/lib/xen-4.4/bin/gdbsx ; do
		if type ${x}> /dev/null 2>&1; then
			gdbsx="$x"
			break
		fi
	done

	store_blkspec=xen_store_blkspec
	store_netspec=xen_store_netspec

	conf=/tmp/xr.conf.$$
	xenstore=/tmp/xr.store.$$
	>${conf}
	>${xenstore}
	OPTIND=1
	conf_disk=
	conf_vif=
	opt_pause=
	opt_interactive=
	opt_destroy='on_poweroff="preserve"'
	opt_mem=64
	opt_name=
	opt_debug=
	opt_cansudo=false
	sudo=''

	while getopts "${myoptstr}" opt; do
		case "$opt" in
		# -n: NETSPEC
		n)
			parse_netspec "${OPTARG}" || usage
			;;
		# -b: BLKSPEC: hostpath,mountpoint
		b)
			parse_blkspec "${OPTARG}" || usage
			;;
		# -e: Set guest environment variable.
		e)
			case "${OPTARG}" in
			*=*)
				key=${OPTARG%%=*}
				value=${OPTARG#*=}
				;;
			*)
				key=${OPTARG}
				value=
				;;
			esac
			[ -n "$key" ] || usage
			echo environ/${key} "${value}" >>${xenstore}
			;;
		# -p: Leave the domain paused after creation.
		p)
			opt_pause=1
			;;
		# -i: Attach to domain console on startup.
		i)
			opt_interactive=1
			;;
		# -d: Destroy domain on poweroff instead of preserving it.
		d)
			opt_destroy='on_poweroff="destroy"'
			;;
		# -N: Override domain name.
		N)
			opt_name=${OPTARG}
			;;
		# -M: Set domain memory.
		M)
			opt_mem=${OPTARG}
			;;
		# -D PORT: attach gdbsx to domain.
		D)
			if [ -z "${gdbsx}" ]; then
				err "'gdbsx' is required for -D, please install it."
			fi
			opt_debug=${OPTARG}
			;;
		S)
			opt_cansudo=true
			;;
		*)
			usage
			;;
		esac
	done
	# Clean up vif and disk, xl does not like trailing commas.
	conf_vif=$(echo ${conf_vif} | sed -e s/,\$//)
	[ -n ${conf_vif} ] && conf_vif="vif=[${conf_vif}]"
	conf_disk=$(echo ${conf_disk} | sed -e s/,\$//)
	[ -n ${conf_disk} ] && conf_disk="disk=[${conf_disk}]"
	# Remaining arguments belong to the application.
	shift $((OPTIND-1))
	[ "$1" = "--" ] && shift
	[ $# -lt 1 ] && usage
	name=${opt_name:-rumprun-$(basename $1)}
	app=$(readlink -f $1)
	shift
	# Generate xl configuration file.
	cat <<EOM >/tmp/xr.conf.$$
kernel="${app}"
name="${name}"
vcpus=1
memory=${opt_mem}
on_crash="preserve"
${opt_destroy}
extra="$@"
${conf_vif}
${conf_disk}
EOM
	if ${opt_cansudo} && [ $(id -u) -ne 0 ]; then
		sudo='sudo'
	fi

	# Create the domain and leave it paused so that we can get its domid.
	if ! ${sudo} xl create -p ${conf} >/dev/null; then
		err xl create failed
	fi
	rm ${conf}
	domid=$(${sudo} xl domid ${name})
	# Write provisioning information for domain to xenstore.
	prefix=/local/domain/${domid}/rumprun
	cat ${xenstore} | while read key value; do
		${sudo} xenstore-write "${prefix}/${key}" "${value}"
	done
	rm ${xenstore}
	# Attach debugger if requested.
	if [ -n "$opt_debug" ]; then
		if objdump -f ${app} | grep -q elf64; then
			bits=64
		else
			bits=32
		fi
		${gdbsx} -a ${domid} ${bits} ${opt_debug} &
	fi
	# Go go go!
	[ -z "$opt_pause" ] && ${sudo} xl unpause ${domid}
	if [ -n "$opt_interactive" ]; then
		exec ${sudo} xl console $domid
	else
		echo xen:${domid}
	fi
}

run_qemu()
{

	store_blkspec=json_store_blkspec
	store_netspec=json_store_netspec

	opt_interactive=
	opt_drivespec=
	opt_debug=
	opt_pause=
	opt_netif=
	json_append '{'
	while getopts "${myoptstr}" opt; do
		case "$opt" in
		b)
			parse_blkspec "${OPTARG}" || usage
			;;
		e)
			json_append "\"env\": \"${OPTARG}\","
			;;
		i)
			opt_interactive=1
			;;
		n)
			parse_netspec "${OPTARG}" || usage
			;;
		p)
			opt_pause="-S"
			;;
		D)
			opt_debug="-gdb tcp::${OPTARG}"
			;;
		S)
			# ignored for now
			;;
		*)
			err qemu stack like zathras: not so good
			;;
		esac
	done
	shift $((${OPTIND}-1))

	json_append "\"cmdline\": \""$@"\""
	json_append '}'
	json_coma="$(echo ${json} | sed 's/,/,,/g')"

	[ -n "${opt_netif}" ] || opt_netif="-net none"

	qemucmd="qemu-system-i386 ${opt_netif} -no-kvm ${opt_drivespec} \
	    ${opt_debug} ${opt_pause} -kernel $1"
	if [ -n "$opt_interactive" ]; then
		${qemucmd} -append "${json_coma}"
	else
		qemucmd="${qemucmd} -display none"
		${qemucmd} -append "${json_coma}" 1>/dev/null 2>&1 &
		echo qemu:$!
	fi
}

if [ $# -lt 2 ]; then
	usage
fi

platform="$1"
shift
case ${platform} in
xen)
	run_xen "$@"
	;;
qemu)
	run_qemu "$@"
	;;
*)
	echo Invalid STACK \"${platform}\" 1>&2
	usage
	;;
esac
exit 0
